<?php

namespace SM\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\DependencyInjection\ContainerInterface;
use SM\Bundle\UserBundle\UserBundle;

/**
 * BaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{

    protected $container;

    public function setContainer(ContainerInterface $container)
    {
        $this->container = $container;

    }

    /**
     * Get container from service
     */
    public function getContainer()
    {
        return $this->container = SMRESTBundle::getContainer();

    }

    /**
     * get list
     *
     * @param type $criteria
     * @param type $orderBy
     * @param type $limit
     * @param type $offset
     *
     * @return Arraycollection
     */
    public function getList($criteria, $orderBy = null, $limit = null, $offset = null)
    {
        return $this->findBy($criteria, $orderBy, $limit, $offset);

    }

    /**
     * get total
     * @param Array $criteria
     *
     * @return Integer
     */
    public function getTotal($criteria)
    {
        return sizeof($this->findBy($criteria));

    }

    /**
     * get next id
     *
     * @return integer
     */
    public function getMaxID()
    {
        $qb = $this->createQueryBuilder('t1');
        $qb->select('MAX(t1.id)+1');
        $max = $qb->getQuery()->getSingleScalarResult();

        return ($max > 0) ? $max : 1;

    }

    /**
     * group code to return result search
     *
     * @param QueryBuilder $queryBuilder
     * @param Boolean      $total
     * @param Integer      $limit
     * @param Integer      $offset
     *
     * @return mixData
     */
    protected function returnResultSearch($queryBuilder, $total, $limit, $offset)
    {
        if (!$total) {
            if ($limit !== null) {
                $queryBuilder->setMaxResults($limit);
            }

            if ($offset !== null) {
                $queryBuilder->setFirstResult($offset);
            }
            try {
                return $queryBuilder->getQuery()->getResult();
            } catch (\Doctrine\ORM\NoResultException $e) {
                return 0;
            }
        } else {
            try {
                return (int) $queryBuilder->getQuery()->getSingleScalarResult();
            } catch (\Doctrine\ORM\NoResultException $e) {
                return 0;
            }
        }

    }

    /**
     * using common creteria on search
     * @param QueryBuilder $queryBuilder
     * @param Expr         $expr
     * @param String       $key
     * @param MixData      $value
     */
    protected function commonCreteriaSearch($queryBuilder, $expr, $key, $value)
    {
        if (is_string($value)) {
            $queryBuilder->andWhere($expr->like('t1.' . $key, $expr->literal("%{$value}%")));

            return;
        }

        if (is_int($value)) {
            $queryBuilder->andWhere("t1.{$key} = :{$key}");
            $queryBuilder->setParameter($key, $value);

            return;
        }

        if (is_object($value)) {
            $queryBuilder->andWhere("t1.{$key} = :{$key}");
            $queryBuilder->setParameter($key, $value);

            return;
        }

    }
}
